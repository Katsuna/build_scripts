#!/bin/bash
#
#     Copyright (C) 2017 The Katsuna Project
#     Copyright (C) 2017 KreAch3R
#
#     Licensed under the Apache License, Version 2.0 (the "License");
#     you may not use this file except in compliance with the License.
#     You may obtain a copy of the License at
#
#          http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.

# Version: 1.8

# Usage: katsuna-deploy OTAPACKAGE DEVICE_NAME API_LEVEL TYPE_NAME JENKINS_INSTANCE (true|false) (optional: RELEASE_BOOL (true|false))
# e.g. katsuna-deploy "~/android/nougat/dev/out/target/product/bullhead/katsuna-161021-bullhead-dev.zip" "bullhead" "24" "dev" "true"

# Variables DO NOT Edit
otapackage=$1
device=$2
api=$3
type=$4
jenkins=$5
release=$6

# Color output
green=`tput setaf 2`
cyan=`tput setaf 6`
red=`tput setaf 1`
yellow=`tput setaf 3`
reset=`tput sgr0`

# Setting up generic script failure guards
set -e
set -o pipefail

# Start of the main script

# Check for at least 5 arguments, else abort
if (( $# < 5 )); then
    echo "${red}Illegal number of parameters!${reset}"
    echo "${yellow}You should specify at least five arguments, OTAPACKAGE DEVICE_NAME API_LEVEL TYPE_NAME JENKINS_INSTANCE (true|false) (optional: RELEASE_BOOL (true|false))"
    echo "e.g. katsuna-deploy "~/android/nougat/dev/out/target/product/bullhead/katsuna-161021-bullhead-dev.zip" "bullhead" "24" "dev" "true"${reset}"
    echo "Your input: katsuna-deploy $otapackage $device $api $type $jenkins $release"
    exit 1
fi

# Use scp to copy files into katsuna-web*
# The ssh key pair is located in ~/.ssh of katsuna-build1
# The definition of katsuna-web* host is in ~/.ssh/config of katsuna-build1
# EXAMPLE:
# Host katsuna-web1
#    HostName ***.***.***.***
#    User root
#    IdentityFile ~/.ssh/id_build2web
#    IdentitiesOnly yes

if [[ -f $otapackage && -f $otapackage.md5sum ]]; then

    # load the necessary variables in runtime
    otafilename=$(basename $otapackage)
    otadir=$(dirname $otapackage)
    otafilemd5=$(cat $(echo $otapackage | sed -e 's/$/.md5sum/') | cut -f1 -d' ')
    otabuildutc=$(cat $(echo $otadir | sed 's/\/out.*//')/out/build_date.txt)

    # Logic designed to separate private and public builds.
    # private builds should only be deployed into the web1 server, while public prod
    # builds should be deployed into both servers' prod folders.
    if [[ $release != "true" ]]; then
        # Create directory if it doesn't exist
        ssh katsuna-web1 "mkdir -p /var/www/updater/dev/files/$device"

        scp $otapackage katsuna-web1:/var/www/updater/dev/files/$device
        scp $otapackage.md5sum katsuna-web1:/var/www/updater/dev/files/$device
        echo "${green}Files pushed to katsuna-web1 ONLY (private build!) successfully!${reset}"
    elif [[ $release == "true" && $type == "prod" ]]; then
        # Create directory if it doesn't exist
        ssh katsuna-web1 "mkdir -p /var/www/updater/prod/files/$device"
        ssh katsuna-web2 "mkdir -p /var/www/updater/prod/files/$device"

        scp $otapackage katsuna-web1:/var/www/updater/prod/files/$device
        scp $otapackage katsuna-web2:/var/www/updater/prod/files/$device
        scp $otapackage.md5sum katsuna-web1:/var/www/updater/prod/files/$device
        scp $otapackage.md5sum katsuna-web2:/var/www/updater/prod/files/$device
        echo "${green}Release is deployed! Files pushed to katsuna-web1, katsuna-web2 successfully!${reset}"
    fi

    if [[ $jenkins == "true" ]]; then
        # Write the otafilename into a file so jenkins can inject it into the post build steps
        echo OTAFILENAME=$otafilename > jenkins.properties
        echo DEVICE=$device >> jenkins.properties
    fi
else
    echo "${red}Error: no such file or directory"
    echo "${red}Files couldn't be pushed to katsuna-web*${reset}"
    exit 1
fi

# Use ssh to run katsuna-notify in the katsuna-web*
# The ssh key pair is located in ~/.ssh of katsuna-build1
# The definition of katsuna-web* host is in ~/.ssh/config of katsuna-build1
# EXAMPLE:
# Host katsuna-web1
#    HostName ***.***.***.***
#    User root
#    IdentityFile ~/.ssh/id_build2web
#    IdentitiesOnly yes

# Logic designed to separate private and public builds.
# private builds should only be deployed into the web1 server, while public prod
# builds should be deployed into both servers' prod folders.
# Also: don't notify dev channel about private prod builds
if [[ $release != "true" && $type != "prod" ]]; then
    ssh katsuna-web1 "bash -s" -- < /usr/local/bin/server_scripts/build_server/katsuna-notify $otafilename $otafilemd5 $otabuildutc $device $api $type
elif [[ $release == "true" && $type == "prod" ]]; then
    ssh katsuna-web1 "bash -s" -- < /usr/local/bin/server_scripts/build_server/katsuna-notify $otafilename $otafilemd5 $otabuildutc $device $api $type
    ssh katsuna-web2 "bash -s" -- < /usr/local/bin/server_scripts/build_server/katsuna-notify $otafilename $otafilemd5 $otabuildutc $device $api $type
    echo "${green}Release is deployed! Katsuna Devices will start getting update notifications as soon as 'katsuna-publish-release' is run!${reset}"
fi
